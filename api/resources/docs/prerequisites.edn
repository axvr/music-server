{:title "Prerequisites"
 :content
 [:main
  [:section
   [:h1 "Prerequisites"]
   [:p
    "This section of the Enqueue API Docs details everything you "
    [:em "need"]
    " to know before interacting with the API."]]
  [:section
   [:h2 {:id "charset"} "Character encoding"]
   [:p
    "All textual content returned from the API is "
    [:a {:href "https://en.wikipedia.org/wiki/Unicode"} "Unicode"]
    " encoded as "
    [:a {:href "https://en.wikipedia.org/wiki/UTF-8"} "UTF-8"]
    ".  When textual content is sent to the API but no character set was
    specified (in the "
    [:a
     {:href "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type"}
     [:code "Content-Type"]]
    " header), UTF-8 is assumed."]]
  ;; TODO
  #_[:section
     [:h2 {:id "compression"} "Compression"]
     [:p "Gzip compressed.  WIP."]]
  [:section
   [:h2 {:id "transit"} "Transit"]
   [:p
    "Enqueue uses "
    [:a {:href "https://github.com/cognitect/transit-format"} "Transit"]
    " (on top of JSON), rather than plain JSON.  There are "
    [:a {:href "https://github.com/cognitect/transit-format#implementations"} "official"]
    " and "
    [:a
     {:href "https://github.com/cognitect/transit-format/wiki/Community-Implementations"}
     "community made"]
    " Transit libraries for various languages."]
   [:p
    "The "
    [:a
     {:href "https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types"}
     "MIME type"]
    " used to represent Transit encoded data is:"
    [:pre org.enqueue.api.transit.interceptors/content-type]]
   [:p
    "Any HTTP response with a "
    [:code "Content-Type"]
    " header set to this MIME type contains Transit encoded data in the
    body.  Likewise, when sending Transit data in the body of an HTTP request,
    you need to set the "
    [:code "Content-Type"]
    " header to the same."]
   [:p
    "You can assume that all request bodies must be, and all response bodies
    are Transit encoded.  Any exceptions will be mentioned in the relevant part
    of the docs."]
   [:p
    "Note that the Enqueue API "
    [:strong "only"]
    " supports Transit over "
    [:em "JSON"]
    ".  It " [:strong "does not"] " support "
    [:em "JSON-Verbose"]
    " or "
    [:em "MessagePack"]
    "."]
   [:h3 {:id "transit-extensions"} "Extension types"]
   [:p
    "Enqueue defines a single Transit extension type called a "
    [:em "duration"]
    ".  A duration represents a span of time in nanoseconds (used for things
    such as song and album running times).  The duration extension type uses
    the tag "
    [:code "dur"]
    " followed by a number of nanoseconds."]
   [:pre
    "[\"~#dur\",\"86400000000000\"]    ; 86,400 seconds or 1 day.\n"
    "[\"~#dur\",\"374000000000\"]      ; 374 seconds or 6:14 minutes.\n"
    "[\"~#dur\",\"-374000000000\"]     ; 374 seconds ago or 6:14 minutes ago.\n"
    "[\"~#dur\",\"12\"]                ; 12 nanoseconds."]
   [:p
    "Note that because durations are sent as nanoseconds they should be stored
    as 64-bit signed integers."]]
  [:section
   [:h2 {:id "idempotency"} "Idempotency"]
   [:p
    "All HTTP request methods in Enqueue "
    [:em "except"]
    " "
    [:a {:href "https://datatracker.ietf.org/doc/html/rfc7231#section-4.3.3"} "POST"]
    " are "
    [:a {:href "https://en.wikipedia.org/wiki/Idempotence"} "idempotent"]
    " by default.  POST requests can be made idempotent by sending an "
    [:code "Idempotency-Key"]
    " header with a "
    [:a {:href "https://en.wikipedia.org/wiki/Universally_unique_identifier"} "UUID"]
    " as its value as shown below."]
   [:pre
    "Idempotency-Key: " (random-uuid)]
   [:p
    "When a client performs a "
    [:abbr
     {:title "When the response contains an HTTP status code within the 200 range."}
     "successful"]
    " POST request with an idempotency key,
    the result is cached for (up to) 6 hours.  The client can then safely retry
    the request (with the same idempotency key) as the API will just return the
    previous response."]
   [:p
    "If a "
    [:abbr {:title "Different path, query parameters, body, etc."} "different"]
    " request is made using a previously used idempotency key (or
    an invalid UUID), an error "
    [:a {:href "https://datatracker.ietf.org/doc/html/rfc7231#section-6.5.1"} "400"]
    " response will be returned."]
   [:p
    "To learn more about idempotency refer to these resources:"]
   [:ul
    [:li
     [:a
      {:href "https://stripe.com/docs/api/idempotent_requests"}
      "Idempotent requests &mdash; Stripe API Docs"]]
    [:li
     [:a
      {:href "https://ieftimov.com/post/understand-how-why-add-idempotent-requests-api/"}
      "Understanding why and how to add idempotent requests to your APIs &mdash; Ilija Eftimov"]]
    [:li
     [:a
      {:href "https://datatracker.ietf.org/doc/html/rfc7231#section-4.2.2"}
      "Idempotent methods (section 4.2.2) &mdash; RFC 7231"]]]]]}
